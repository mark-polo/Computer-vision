import cv2 as cv
import mediapipe as mp
import math

cap = cv.VideoCapture(0)
cap.set(3, 1280)
cap.set(4, 720)
cx, cy, w, h = 100, 100, 200, 200

class HandDetector:
	def __init__(self, mode=False, maxHands=2, modelComplexity=1, detectionCon=0.5, trackCon=0.5):
		self.mode = mode
		self.maxHands = maxHands
		self.modelComplexity = modelComplexity
		self.detectionCon = detectionCon
		self.trackCon = trackCon

		self.mpHands = mp.solutions.hands
		self.hands = self.mpHands.Hands(self.mode, self.maxHands, self.modelComplexity, self.detectionCon, self.trackCon)
		self.mpDraw = mp.solutions.drawing_utils

    
	def findHands(self, img, draw=True):
		imgRGB = cv.cvtColor(img, cv.COLOR_BGR2RGB)
		self.results = self.hands.process(imgRGB)

		if self.results.multi_hand_landmarks:
			for handLms in self.results.multi_hand_landmarks:
				if draw:
					self.mpDraw.draw_landmarks(img, handLms, self.mpHands.HAND_CONNECTIONS)
		return img


	def findPosition(self, img, handNo=0, draw=True):
		xList = []
		yList = []
		bbox = []
		self.lmList = []
		if self.results.multi_hand_landmarks:
			myHand = self.results.multi_hand_landmarks[handNo]
			for id, lm in enumerate(myHand.landmark):
				h, w, _ = img.shape
				cx, cy = int(lm.x*w), int(lm.y*h)
				xList.append(cx)
				yList.append(cy)
				self.lmList.append([id, cx, cy])
				if draw:
					cv.circle(img, (cx, cy), 5, (255,0,255), cv.FILLED)
			xmin, xmax = min(xList), max(xList)
			ymin, ymax = min(yList), max(yList)
			bbox = xmin, ymin, xmax, ymax

			if draw:
				cv.rectangle(img, (bbox[0]-20, bbox[1]-20), (bbox[2]+20, bbox[3]+20), (0, 255, 0), 2)
		return self.lmList, bbox

	def findDistance(self, p1, p2, img, draw=True):
		x1, y1 = self.lmList[p1][1], self.lmList[p1][2]
		x2, y2 = self.lmList[p2][1], self.lmList[p2][2]
		cx, cy = (x1+x2)//2, (y1+y2)//2

		if draw:
			cv.circle(img, (x1,y1), 15, (255,0,255), cv.FILLED)
			cv.circle(img, (x2,y2), 15, (255,0,255), cv.FILLED)
			cv.line(img, (x1,y1), (x2,y2), (255,0,255), 3)
			cv.circle(img, (cx,cy), 15, (255,0,255), cv.FILLED)

		length = math.hypot(x2-x1, y2-y1)
		return length, img, [x1, y1, x2, y2, cx, cy]

	def staffDetection(self, frame):
		lmList, _ = self.findPosition(frame)

		if len(lmList) != 0:
			length, _, _ = self.findDistance(11, 15, frame, draw=True)
			if length >= 130 and length <= 180:
				cv.putText(frame,"Spoke",(100,100),cv.FONT_HERSHEY_SIMPLEX,3,(0,255,0),4)
				print(length)
			elif length <= 120:
				cv.putText(frame,"Usual state",(100,100),cv.FONT_HERSHEY_SIMPLEX,3,(0,255,0),4)
			elif length >= 200:
				cv.putText(frame,"Fuck",(100,100),cv.FONT_HERSHEY_SIMPLEX,3,(0,255,0),4)


def main():
	detector = HandDetector(detectionCon=0.8)

	while True:
		_, frame = cap.read()
		frame = cv.flip(frame, 1, 1)
		frame = detector.findHands(frame)

		detector.staffDetection(frame)

		cv.imshow("Image", frame)

		if cv.waitKey(1) & 0xFF == 27:
			break

if __name__ == "__main__":
	main()
	cap.release()
	cv.destroyAllWindows()